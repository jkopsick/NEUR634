// this file contains procedures used to set the membrane propertiesproc init_params() {	// initialize user-defined membrane parameters	celsius=35	global_ra=176.27	// internal resistivity in ohm-cm	Cm=1.434			// specific membrane capacitance in uF/cm^2	Rm=25700			// specific membrane resistivity in ohm-cm^2  get this from fit of tau_m, assuming Cm=1 	rmsoma=Rm 	Vleak=-66			// leak reversal -66 in Cs+*/	Vrest=-66			// resting potential -60 in control, -66 in Cs+	nablock=1       	// fraction of na current blocked by TTX	spinescale=1.0  	// scale total area to account for spines	areascale=1   		// scale total area by an additional factor	target=98.1      	// 154 input resistance target in CsCl need to determine this before	// attenuation is 0.533 in CsCl for this cell	// passive membrane parameters determined by fitting Cs data	if (ipass==2) {		// nonuniform Rm values		global_ra = 176.27		rmsoma = 125610		rmend = 17853		rmhalfdis= 88.97		rmsteep = 20		Cm=1.434	}	if ((ipass==2) && (init_h>0) && (hblock<1)) {		// nonuniform Rm and nonuniform gh		Vrest=-60				minq = 16.777		maxq = 121.24		qhalfdis = 296.88		qsteep = 60.708		erevh_h = -25		zeta_h = 7		a0_h=0.64141/1000		qten_h=4.5	}}// insert and initialize membrane propertiesproc insert_pass() {	print "Inserting passive membrane"	forall {insert pas Ra=global_ra e_pas=Vleak}	forall {insert dv}	print "Inserting spines and setting spine scale values"	forall { insert spines scale_spines=1.0 }	forsec no_spines 		{ scale_spines=1.0 }	forsec basals 			{ scale_spines=2.7 }	forsec med_spines_rad 	{ scale_spines=1.3 }	forsec max_spines_rad 	{ scale_spines=2.1 }	forsec thin_rad 		{ scale_spines=2.9 }	forsec med_spines_LM 	{ scale_spines=1.1 }	forsec thin_LM 			{ scale_spines=1.2 }	if (ipass==1) {		init_pass1(Cm)		// initialize uniform passive membrane	}	if (ipass==2) {		init_pass2(Cm)		// initialize nonuniform passive membrane	}}proc insert_h() {	printf("Inserting sag conductance in all segments: %d pecent blocked\n",hblock*100)	forall { insert h gbar_h=0 }	if (init_h==5) {		init_h5(a0_h*1000)	// initialize nonuniform Rm, nonuniform Ih	}}//	initialize parameters for nonuniform Rm			proc init_pass2() {	// sigmoidal decrease in Rm from rmsoma to rmend	// rmsoma and rmend, and rmhalfdis and rmsteep are set in init_params	// function applies to basal dendrites also	print "Initializing nonuniform passive membrane properties with init_pass2"	Cm=$1	soma.sec distance()	printf("rmsoma = %3.0f, rmend = %3.0f, rmsteep = %3.0f\n",rmsoma, rmend, rmsteep)	forall{		dis=distance(0.5)		rmpoint=rmend+(rmsoma-rmend)/(1+exp((dis-rmhalfdis)/rmsteep))		{ g_pas=1/(rmpoint/scale_spines) cm=Cm*scale_spines Ra=global_ra }	}}			//	initialize nonuniform H conductance			proc init_h5() {	// scale up sag conductance as a sigmoidal function of distance from the soma	// q=minq+(maxq-minq)/(1+exp((-dis-qhalfdis)/qsteep))	// basals are set to the same value as the soma	// set minq, maxq, and qhalfdis and qsteep in init_params	printf("Initializing sag conductance in all segments with init_h5\n")	a0_h=$1/1000	soma.sec distance()	forall{		dis=distance(0.5)		hpoint=minq+(maxq-minq)/(1+exp(-(dis-qhalfdis)/qsteep))		{ gbar_h=hpoint*scale_spines*(1-hblock) }	}	forsec basals{		{ gbar_h=minq*scale_spines*(1-hblock) }		}}