// Nelson's functions (these should become geometry independent)

proc read_expt_data() {
	vect = $1		// this is the total length of the wave (ms) - ok to be too long
	vecdt = $2		// need to vary these depending on the experiment...this is the SI	
	veclength = int(vect/vecdt)
	print "Reading real somatic data for fit..."
	somarawfile.ropen(somareadfile)
	somarawvec.scanf(somarawfile,veclength,2,2)
	somarawfile.close()
	print "Reading real dendritic data for fit..."
	dendrawfile.ropen(dendreadfile)
	dendrawvec.scanf(dendrawfile,veclength,2,2)
	dendrawfile.close()
	somarawvec.play(&somarawv,vecdt)
	dendrawvec.play(&dendrawv,vecdt)
	somarawvec.play_remove()
	dendrawvec.play_remove()
	somarawvec.add(soma.sec.v(0.5))
	dendrawvec.add(dend.sec.v(0.6))
	somarawvec.play(&somarawv,vecdt)
	dendrawvec.play(&dendrawv,vecdt)
}

proc run() {
	stdinit()
	setdt()
	continuerun(tstop)
	if (writeout>0) {
		write_data()
	}
}

proc init() { local dtsav
	if (usecvode>0) {
		cvode.active(1)
	}
	act = cvode.active()	// this stores cvode state even it has been turned on manually in gui
	cvode.active(0)
	v_init=Vrest			// v_init is the value displayed in the run control panel
	finitialize(v_init)
//	fcurrent()				// no longer necessary according to Hines' notes in stdrun.hoc
	ss_save()
	if (writeout>0) {
		somasimvec.record(&soma.sec.v(0.5))
		dendsimvec.record(&dend.sec.v(0.5))
		basalsimvec.record(&basal.sec.v(0.5))
		tuftsimvec.record(&tuft.sec.v(0.5))
	}
//	if (hblock<1 || init_irk>0) {
	if (hblock<1) {
		dtsav=dt
		dt=10	// do not make this more than 10
		t=1e6
		printf("initializing")
		for i=0,40 {
			printf(".")
			fadvance()
		}
		printf("\n")
		dt=dtsav
		finitialize()
		i=0
		forall {
			vrest[i]=v(0.5)
			i+=1
		}
		ss_save()
		ss_subtract()
	}
	t=0
	if ( (act<1) && (usecvode>0) ) {
	    print "turn on cvode after complete initialization"
	    cvode.active(1)
	    cvode.atol(1e-3)
	    cvode.re_init()
	}
}

proc advance() {
	fadvance()
	ss_subtract()
}

proc ss_save() {
	Vrestsoma=soma.sec.vrest_dv(0.5)
	Vrestdend=dend.sec.vrest_dv(0.6)
	i=0
	forall {
		vss[i]=v(0.5)
		vrest[i]=v(0.5)
		i+=1
	}
}

proc ss_subtract() {
	vsoma=soma.sec.v(0.5)-Vrestsoma
	vdend=dend.sec.v(0.6)-Vrestdend
}

proc somastep_cc() {		// requires 5 arguments passed from init
	soma.sec elecstim.loc(0.5)
	elecstim.amp=$1
	elecstim.del=$2
	elecstim.dur=$3
	elecstim.i=0
}

proc syn_locations() {
	// synapses for figure 6
	dendA4_0111111111111111110 synapse[0].loc(0.2)			// xxx microns
	dendA4_0111111111111111110 synapse[1].loc(0.4)			// xxx microns
	dendA4_0111111111111111110 synapse[2].loc(0.6)			// 411.97 microns
	dendA4_0111111111111111110 synapse[3].loc(0.8) 			// 433.94 microns
	dendA4_01111111111111111101 synapse[4].loc(0.5) 		// 445.71 microns
	dendA4_01111111111111111110 synapse[5].loc(0.5) 		// 421.58 microns		
	dendA4_01111111111111111111 synapse[6].loc(0.25) 		// 435.36 microns
	dendA4_01111111111111111111 synapse[7].loc(0.75) 		// 564.61 microns
	dendA4_011111111111111111111 synapse[8].loc(0.25)  		// 490.59 microns
	dendA4_011111111111111111111 synapse[9].loc(0.75)  		// 539.96 microns
	dendA4_011111111111111111100 synapse[10].loc(0.5) 		// 608.40 microns
	dendA4_011111111111111111101 synapse[11].loc(0.5) 		// 593.36 microns
	dendA4_0111111111111111111011 synapse[12].loc(0.5) 		// 617.80 microns
	dendA4_01111111111111111111 synapse[13].loc(0.5) 		// 517.16 microns
	dendA4_011111111111111111111 synapse[14].loc(0.5)  		// 562.13 microns
	dendA4_0111111111111111111110 synapse[15].loc(0.5)		// 606.32 microns
	dendA4_01111111111111111111101 synapse[16].loc(0.5) 	// 626.02 microns
	dendA4_0111111111111111111110111 synapse[17].loc(0.5) 	// 700.37 microns
	dendA4_011111111111111111001 synapse[18].loc(0.5) 		// 733.22 microns
	dendA4_0111111111111111111100 synapse[19].loc(0.5) 		// 789.61 microns
	dendA4_011111111111111111000 synapse[20].loc(0.25) 		// new
	dendA4_011111111111111111000 synapse[21].loc(0.75) 		// new
	dendA4_011111111111111111011 synapse[22].loc(0.25) 		// new
	dendA4_011111111111111111011 synapse[23].loc(0.75) 		// new
	dendA4_011111111111111111011 synapse[24].loc(0.25) 		// new
	dendA4_011111111111111111110 synapse[25].loc(0.25) 		// new
	dendA4_011111111111111111110 synapse[26].loc(0.5) 		// new
	dendA4_011111111111111111110 synapse[27].loc(0.75) 		// new
	dendA4_01111111111111111111100 synapse[28].loc(0.25) 	// new
	dendA4_01111111111111111111100 synapse[29].loc(0.75) 	// new
	dendA4_01111111111111111110 synapse[30].loc(0.25) 		// new
	dendA4_011111111111111111101 synapse[31].loc(0.75) 		// new
	dendA4_0111111111111111110010 synapse[32].loc(0.2) 		// new
	dendA4_0111111111111111110010 synapse[33].loc(0.4) 		// new
	dendA4_0111111111111111110010 synapse[34].loc(0.6) 		// new
	dendA4_0111111111111111110010 synapse[35].loc(0.8) 		// new
	dendA4_011111111111111111111010 synapse[36].loc(0.25) 		// new
	dendA4_011111111111111111111010 synapse[37].loc(0.75) 		// new
	dendA4_0111111111111111111010 synapse[38].loc(0.25) 		// new
	dendA4_0111111111111111111010 synapse[39].loc(0.75) 		// new
	// synapses for figure 7
	basal.sec synapse[40].loc(0.5)	 // basal - 137 microns
	apical.sec synapse[41].loc(0.5)  // proximal apical - 346 microns
	oblique.sec synapse[42].loc(0.5) // side branch - 346 microns
	tuft.sec synapse[43].loc(0.5)	 // distal - 782 microns
	tuft.sec synapse[44].loc(0.5)	 // distal - 782 microns
}

proc syn6_cc() {
	print "Figure 6: setting up 40 tuft synapses with fixed conductance"
	for i=0,39 {
		synapse[i].gmax=$2
		synapse[i].tau0=$3
		synapse[i].tau1=$4
		synapse[i].e=$5
		synapse[i].onset=$6
	}
	for i=40,44 {
		synapse[i].gmax=0
		synapse[i].tau0=$3
		synapse[i].tau1=$4
		synapse[i].e=$5
		synapse[i].onset=$6
	}
}

proc syn7A_cc() {
	print "Figure 7: setting up single synapses with fixed conductance"
	for i=0,44 {
		synapse[i].gmax=0
		synapse[i].tau0=$3
		synapse[i].tau1=$4
		synapse[i].e=$5
		synapse[i].onset=$6
	}
	if (syn7==1) {
		synsimvec.record(&basal.sec.v(0.5))
		synapse[40].gmax=0.001
	}
	if (syn7==2) {
		synsimvec.record(&apical.sec.v(0.5))
		synapse[41].gmax=0.001
	}
	if (syn7==3) {
		synsimvec.record(&oblique.sec.v(0.5))
		synapse[42].gmax=0.001
	}	 
	if (syn7==4) {
		synsimvec.record(&tuft.sec.v(0.5))
		synapse[43].gmax=0.001
	}
	if (syn7==5) {
		synsimvec.record(&tuft2.sec.v(0.5))
		synapse[44].gmax=0.001
	}
}

// find scale factor

proc findsf() {	/* find scale factor */
	target=$1
//	print target
	error=rn-target
	adjust=error/target
	oldareascale=areascale
	areascale=areascale+(adjust*areascale)
}

proc sum_error() {
	if (short>0) {
		tstarts=7
		tstartd=5
	}
	if (long>0) {
		tstarts=50
		tstartd=50
	}
	if (both>0) {
		tstarts=50
		tstartd=50
	}
	if (t>tstarts) {
		mserrsoma=mserrsoma+($1-somarawv)^2
	}
	if (t>tstartd) {
		mserrdend=mserrdend+($2-dendrawv)^2
	}
}

proc avg_error() {		//finds mean square(?) error between fit and data.
	mserrsoma2=mserrsoma/((tstop-tstarts)/dt)
	mserrdend2=mserrdend/((tstop-tstartd)/dt)
/*	mserrsoma=sqrt(mserrsoma2) */
/*	mserrdend=mserrdend2 */
	mserrsoma=mserrsoma2
	mserrdend=mserrdend2
	mserr=(mserrsoma+mserrdend)/2
}

//makes new output files
		
proc write_data() {
	printf("Writing output files...\n")
	outfile.wopen(somaoutname)
     /*	somasimvec.printf(outfile,"%6.3f\n") */
	somasimvec.vwrite(outfile)
	outfile.close()

	outfile.wopen(dendoutname)
     /*	dendsimvec.printf(outfile,"%6.3f\n") */
	dendsimvec.vwrite(outfile)
	outfile.close()

	outfile.wopen(basaloutname)
	basalsimvec.vwrite(outfile)
	outfile.close()

	outfile.wopen(tuftoutname)
     /*	dendsimvec.printf(outfile,"%6.3f\n") */
	tuftsimvec.vwrite(outfile)
	outfile.close()

}

proc write_for_fit() {
	ropen("conbothsoma.dat")
	wopen("test.dat")
	fprint("%d\n", fscan())
	for i=0,3174 {
	  fprint("%6.3f  %6.3f\n", fscan(), fscan()-76)
	}
	wopen()
	ropen()
}

